# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet Def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (int ${1:i} = ${2:0}; $1 < ${3:sup}; ${4:++}$1) {
		${5:/* code */}
	}
snippet idx
	int idx = 0; /* linear array index math variable */
	${3:idx = ((k * space->jMax + j) * space->iMax + i) * dim;}
	${2:idx = (k * space->jMax + j) * space->iMax + i;}
	${1:idx = j * space->iMax + i;}
# Custom For Loop
snippet forr
	for (int ${1:i}Count = ${2:0}; $1Count < ${3:10}; ${4:++}$1Count) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:int} ${2:function_name}(${3})
	{
		${4:/* code */}
		return 0;
	}
# Function Declaration
snippet fund
	${1:int} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	${1:struct}->${2:member}
# boxed comments
snippet comx
	/****************************************************************************
	 * ${1}                                                                     *
	 ****************************************************************************/
# section seperator
snippet coms
	/****************************************************************************
	 * ${1}
	 ****************************************************************************/
# block comments
snippet comb
	/*
	 * ${1}
	 */
# short comments
snippet com
	/* ${1} */
